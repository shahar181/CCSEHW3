name: assignment3

on: push

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log start time
        run: echo "$(date -Iminutes)" > log.txt

      - name: Log submitter names
        run: echo "Shahar Kronenfeld, Aviv Sharon" >> log.txt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker image
        run: |
          docker buildx build --platform linux/amd64 -t mybooks:latest --output type=docker,dest=/tmp/mybooks.tar ./Books
          if [ $? -eq 0 ]; then
            echo "image successfully built" >> log.txt
          else
            echo "image not able to be built" >> log.txt
            exit 1
          fi

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: mybooks-image
          path: /tmp/mybooks.tar

      - name: Upload log file after build
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: log-file
          path: log.txt

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
      - name: List downloaded artifacts
        run: ls -lR
      - name: Load Docker image
        run: docker load -i mybooks-image/mybooks.tar
      - name : check images
        run : docker images
      - name: Set up Docker Compose
        run: |
          docker-compose up -d
          sleep 20  # Ensure services are up and running
          if [ $? -eq 0 ]; then
            echo "Container up and running" >> log-file/log.txt
          else
            echo "Container failed to run" >> log-file/log.txt
            exit 1
          fi

      - name: Set up Python
        run: |
            python -m pip install --upgrade pip
            pip install pytest requests
            if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run tests
        run: |
          cd tests
          set +e  
          pytest -v assn3_tests.py > ../assn3_test_results.txt
          TEST_RESULT=$?
          set -e
          if [ $TEST_RESULT -eq 0 ]; then
              echo "tests succeeded" >> ../log-file/log.txt
          else
              echo "tests failed" >> ../log-file/log.txt
              exit 1
          fi
          

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: assn3_test_results.txt

      - name: Upload log file after test
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: log-file
          path: log-file/log.txt
          overwrite: true
  query:
       runs-on: ubuntu-latest
       needs: test
       steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Download all artifacts
          uses: actions/download-artifact@v4

        - name: Load Docker image
          run: docker load -i mybooks-image/mybooks.tar


        - name: Set up Docker
          run: |
            docker-compose up -d
            sleep 20  # Ensure services are up and running


        - name: Post initial data
          run: |
            curl -X POST http://localhost:5001/books -H "Content-Type: application/json" -d '{"title":"Adventures of Huckleberry Finn", "ISBN":"9780520343641", "genre":"Fiction"}'
            curl -X POST http://localhost:5001/books -H "Content-Type: application/json" -d '{"title":"The Best of Isaac Asimov", "ISBN":"9780385050784", "genre":"Science Fiction"}'
            curl -X POST http://localhost:5001/books -H "Content-Type: application/json" -d '{"title":"Fear No Evil", "ISBN":"9780394558783", "genre":"Biography"}'
            curl -X POST http://localhost:5001/books -H "Content-Type: application/json" -d '{"title":"The Adventures of Tom Sawyer", "ISBN":"9780195810400", "genre":"Fiction"}'
            curl -X POST http://localhost:5001/books -H "Content-Type: application/json" -d '{"title":"I, Robot", "ISBN":"9780553294385", "genre":"Science Fiction"}'
            curl -X POST http://localhost:5001/books -H "Content-Type: application/json" -d '{"title":"Second Foundation", "ISBN":"9780553293364", "genre":"Science Fiction"}'

        - name: Perform queries and generate response file
          run: |
            touch response.txt
            while IFS= read -r line
            do
              echo "Processing line: $line"  # Print the query being processed
              RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:5001/books${line}")
              echo "HTTP Status: $RESPONSE"  # Print the HTTP status received
              if [[ "$RESPONSE" =~ ^2 ]]; then
                JSON=$(curl -s "http://localhost:5001/books${line}")
                echo -e "query: $line\nresponse: $JSON" >> response.txt
              else
                echo -e "query: $line\nresponse: error $RESPONSE" >> response.txt
              fi
            done < query.txt

        - name: Upload response file
          uses: actions/upload-artifact@v4
          with:
            name: response-results
            path: response.txt
